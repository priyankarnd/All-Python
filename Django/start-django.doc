1. Environment creation
virtualenv .
source bin/activate
pip install django

2. Create a blank Django project
mkdir src 
cd src 
django-admin startproject trydjango .
python manage.py runserver

3. Sync all the settings
python manage.py makemigrations
python manage.py migrate

4. Create superuser
python manage.py createsuperuser
Go to server webpage now to check: http://127.0.0.1:8000/admin/

5. Create apps
python manage.py startapp appname

6. Create models in app_folder/models.py

7. In trydjango/settings.py, in INSTALLED_APPS, register your app

8. Import your app in app_folder/admin.py

9. Go to server by webpage and see product option which can be edited

10. Creating products from Python shell

(trydjango) bappa@Little-Master:~/trydjango/src$  python manage.py shell
>>> from products.models import Product
>>> Product.objects.create(title= 'New product 2',description = 'another one', price = '19312', summary='sweet')
<Product: Product object (2)>
>>> Product.objects.create(title= 'New product 2',description = 'another one', price = '19312', summary='sweet')
<Product: Product object (3)>
>>> Product.objects.create(title= 'New product 2',description = 'another one', price = '19312', summary='sweet')
<Product: Product object (4)>
>>> Product.objects.create(title= 'New product 2',description = 'another one', price = '19312', summary='sweet')
<Product: Product object (5)>
>>> Product.objects.all()
<QuerySet [<Product: Product object (1)>, <Product: Product object (2)>, <Product: Product object (3)>, <Product: Product object (4)>, <Product: Product object (5)>]>

11. Creating custom homepage
In trydjango → urls.py, import views from appname. Add path in url patterns.

12. Using Django templates
Add templates folder and add .html pages
Add templates path in TEMPLATES → DIRS in settings.py 
Use render in views.py

13. For more templates features, see the templates documentation

14. Retrieving data from database
(trydjango) bappa@Little-Master:~/trydjango/src$  python manage.py shell
Python 3.10.6 (main, Mar 10 2023, 10:55:28) [GCC 11.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from products.models import Product
>>> Product.objects.get(id=1)
<Product: Product object (1)>
>>> obj = Product.objects.get(id=1)
>>> dir(obj)
['DoesNotExist', 'MultipleObjectsReturned', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_check_column_name_clashes', '_check_constraints', '_check_db_table_comment', '_check_default_pk', '_check_field_name_clashes', '_check_fields', '_check_id_field', '_check_index_together', '_check_indexes', '_check_local_fields', '_check_long_column_names', '_check_m2m_through_same_relationship', '_check_managers', '_check_model', '_check_model_name_db_lookup_clashes', '_check_ordering', '_check_property_name_related_field_accessor_clashes', '_check_single_primary_key', '_check_swappable', '_check_unique_together', '_do_insert', '_do_update', '_get_FIELD_display', '_get_expr_references', '_get_field_value_map', '_get_next_or_previous_by_FIELD', '_get_next_or_previous_in_order', '_get_pk_val', '_get_unique_checks', '_meta', '_perform_date_checks', '_perform_unique_checks', '_prepare_related_fields_for_save', '_save_parents', '_save_table', '_set_pk_val', '_state', 'adelete', 'arefresh_from_db', 'asave', 'check', 'clean', 'clean_fields', 'date_error_message', 'delete', 'description', 'featured', 'from_db', 'full_clean', 'get_constraints', 'get_deferred_fields', 'id', 'objects', 'pk', 'prepare_database_save', 'price', 'refresh_from_db', 'save', 'save_base', 'serializable_value', 'summary', 'title', 'unique_error_message', 'validate_constraints', 'validate_unique']
>>> obj.title
'Coconut oil'
>>> obj.price
Decimal('12.25')
>>> obj.summary
'Freshly made oil'
>>> obj.featured
True



Exit from virtual environment: deactivate
